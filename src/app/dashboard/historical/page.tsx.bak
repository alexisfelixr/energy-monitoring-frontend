"use client";

import React, { useState, useEffect } from "react";
import LineChart from "@/components/ui/LineChart";
import { MedicionesAPI, SensorsAPI, CentrosAPI, AreasAPI } from "@/lib/api";
import { format } from "date-fns";

// Tipos para los datos históricos
type HistoricalDataItem = {
  fecha: string;
  sensorId: number;
  nombreSensor: string;
  centroId: number;
  nombreCentro: string;
  areaId?: number;
  nombreArea: string;
  voltajePromedio: number;
  corrientePromedio: number;
  consumoPromedio: number;
};

type ChartDataPoint = {
  fecha: string;
  valor: number;
};

type HistoricalChartData = {
  voltajePorDia: ChartDataPoint[];
  consumoPorDia: ChartDataPoint[];
};

interface HistoricalResponse {
  datosResumen: HistoricalDataItem[];
  voltajeSeriesDiarias: ChartDataPoint[];
  corrienteSeriesDiarias: ChartDataPoint[];
  consumoSeriesDiarias: ChartDataPoint[];
}

// Definición de los datos para el LineChart
type LineChartProps = {
  data: any;
  width: number;
  height: number;
};

export default function HistoricalPage() {
  // Estados para datos y filtros
  const [historicalData, setHistoricalData] = useState<HistoricalDataItem[]>([]);
  const [chartData, setChartData] = useState<HistoricalChartData>({ voltajePorDia: [], consumoPorDia: [] });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Estados para los filtros
  const [centros, setCentros] = useState<{id: number; nombre: string}[]>([]);
  const [areas, setAreas] = useState<{id: number; nombre: string}[]>([]);
  const [sensores, setSensores] = useState<{id: number; sensorUid: string}[]>([]);
  
  const [filters, setFilters] = useState({
    startDate: format(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), 'yyyy-MM-dd'), // 7 días atrás
    endDate: format(new Date(), 'yyyy-MM-dd'),
    centroId: '',
    areaId: '',
    sensorId: ''
  });

  // Función para manejar cambios en los filtros
  const handleFilterChange = (field: string, value: string) => {
    setFilters(prev => ({ ...prev, [field]: value }));
  };

  // Cargar los centros, áreas y sensores para los filtros
  useEffect(() => {
    const loadFilterOptions = async () => {
      try {
        const [centrosData, areasData, sensoresData] = await Promise.all([
          CentrosAPI.getAll(),
          AreasAPI.getAll(),
          SensorsAPI.getAll()
        ]);
        
        setCentros(centrosData);
        setAreas(areasData);
        setSensores(sensoresData);
      } catch (err) {
        console.error("Error loading filter options:", err);
        setError("Error al cargar opciones de filtro.");
      }
    };
    
    loadFilterOptions();
  }, []);

  // Función para cargar datos históricos con los filtros aplicados
  useEffect(() => {
    const fetchHistoricalData = async () => {
      try {
        setIsLoading(true);
        setError(null);
        
        // Convertir filtros a números cuando sea necesario
        const apiFilters = {
          startDate: filters.startDate,
          endDate: filters.endDate,
          centroId: filters.centroId ? parseInt(filters.centroId) : undefined,
          areaId: filters.areaId ? parseInt(filters.areaId) : undefined,
          sensorId: filters.sensorId ? parseInt(filters.sensorId) : undefined
        };
        
        const response = await MedicionesAPI.getHistoricalData(apiFilters);
        const data = response as HistoricalResponse;
        
        setHistoricalData(data.datosResumen);
        setChartData({
          voltajePorDia: data.voltajeSeriesDiarias,
          consumoPorDia: data.consumoSeriesDiarias
        });
        
        setIsLoading(false);
      } catch (err) {
        console.error("Error fetching historical data:", err);
        setError("Error al cargar los datos históricos.");
        setIsLoading(false);
      }
    };
    
    fetchHistoricalData();
  }, [filters]); // Se ejecuta cuando cambian los filtros

  // Preparar datos para el gráfico de líneas
  const lineChartData = {
    labels: chartData.voltajePorDia.map(point => point.fecha),
    datasets: [
      {
        label: 'Voltaje Promedio (V)',
        data: chartData.voltajePorDia.map(point => point.valor),
        borderColor: 'rgba(75, 192, 192, 1)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        yAxisID: 'voltage',
      },
      {
        label: 'Consumo Promedio (kW)',
        data: chartData.consumoPorDia.map(point => point.valor),
        borderColor: 'rgba(255, 99, 132, 1)',
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        yAxisID: 'consumption',
      }
    ],
    yAxes: [
      {
        id: 'voltage',
        type: 'linear',
        position: 'left',
        ticks: {
          min: 90,
          max: 150
        }
      },
      {
        id: 'consumption',
        type: 'linear',
        position: 'right',
        ticks: {
          min: 0,
          max: 10
        }
      }
    ]
  };
  
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Datos Históricos</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      {/* Filtros */}
      <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100 mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          {/* Fecha inicio */}
          <div>
            <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">Fecha inicio</label>
            <input
              type="date"
              id="startDate"
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filters.startDate}
              onChange={(e) => handleFilterChange("startDate", e.target.value)}
            />
          </div>
          
          {/* Fecha fin */}
          <div>
            <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 mb-1">Fecha fin</label>
            <input
              type="date"
              id="endDate"
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filters.endDate}
              onChange={(e) => handleFilterChange("endDate", e.target.value)}
            />
          </div>
          
          {/* Centro */}
          <div>
            <label htmlFor="centroId" className="block text-sm font-medium text-gray-700 mb-1">Centro</label>
            <select
              id="centroId"
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filters.centroId}
              onChange={(e) => handleFilterChange("centroId", e.target.value)}
            >
              <option value="">Todos</option>
              {centros.map(centro => (
                <option key={centro.id} value={centro.id.toString()}>{centro.nombre}</option>
              ))}
            </select>
          </div>
          
          {/* Área */}
          <div>
            <label htmlFor="areaId" className="block text-sm font-medium text-gray-700 mb-1">Área</label>
            <select
              id="areaId"
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filters.areaId}
              onChange={(e) => handleFilterChange("areaId", e.target.value)}
            >
              <option value="">Todas</option>
              {areas.map(area => (
                <option key={area.id} value={area.id.toString()}>{area.nombre}</option>
              ))}
            </select>
          </div>
          
          {/* Sensor */}
          <div>
            <label htmlFor="sensorId" className="block text-sm font-medium text-gray-700 mb-1">Sensor</label>
            <select
              id="sensorId"
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filters.sensorId}
              onChange={(e) => handleFilterChange("sensorId", e.target.value)}
            >
              <option value="">Todos</option>
              {sensores.map(sensor => (
                <option key={sensor.id} value={sensor.id.toString()}>{sensor.sensorUid}</option>
              ))}
            </select>
          </div>
        </div>
      </div>
      
      {/* Gráfico principal de líneas */}
      <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-lg font-semibold text-gray-800">Voltaje y Consumo por día</h2>
        </div>
        <div className="h-80">
          {isLoading ? (
            <div className="w-full h-full flex justify-center items-center">
              <div className="loader">Cargando...</div>
            </div>
          ) : (
            <LineChart 
              data={lineChartData as any} 
              width={800} 
              height={320} 
            />
          )}
        </div>
      </div>
      
      {/* Tabla de datos */}
      <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100">
        <h2 className="text-lg font-semibold mb-4 text-gray-800">Datos Detallados</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Centro</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Área</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sensor</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Voltaje Prom. (V)</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Corriente Prom. (A)</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Consumo Prom. (kW)</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {isLoading ? (
                <tr>
                  <td colSpan={7} className="px-6 py-4 text-center">Cargando datos...</td>
                </tr>
              ) : historicalData.length === 0 ? (
                <tr>
                  <td colSpan={7} className="px-6 py-4 text-center">No hay datos disponibles para los filtros seleccionados</td>
                </tr>
              ) : (
                historicalData.map((item, index) => (
                  <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.fecha}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.nombreCentro}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.nombreArea}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.nombreSensor}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.voltajePromedio.toFixed(2)}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.corrientePromedio.toFixed(2)}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.consumoPromedio.toFixed(2)}</td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
      (filterParams.area === "" || d["Área"] === filterParams.area) &&
      (filterParams.fecha === "" || d["Fecha"] === filterParams.fecha)
    );
  });

  // Datos para los gráficos
  const lineChartData = filteredData.map(d => ({
    date: d["Hora"],
    voltage: d["Voltaje (V)"],
    current: d["Corriente (A)"]
  }));

  const barChartData = areas.map(area => {
    const areaData = filteredData.filter(d => d["Área"] === area);
    const avgVoltage = areaData.reduce((sum, d) => sum + d["Voltaje (V)"], 0) / (areaData.length || 1);
    return { name: area, value: avgVoltage };
  });

  const pieChartData = sensores.map(sensor => {
    const sensorData = filteredData.filter(d => d["Sensor ID"] === sensor);
    const totalCurrent = sensorData.reduce((sum, d) => sum + d["Corriente (A)"], 0);
    return { name: sensor, value: totalCurrent };
  });

  // Renderizado de la página
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 p-8 flex justify-center items-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-gray-700">Cargando datos históricos...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-8 flex justify-center items-center">
        <div className="text-center">
          <div className="bg-red-100 text-red-700 p-4 rounded-lg">
            <p>{error}</p>
            <button 
              onClick={() => window.location.reload()} 
              className="mt-4 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
            >
              Reintentar
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto">
      <div className="flex items-center mb-6">
        <div className="bg-blue-500 p-2 rounded-md mr-3">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h1 className="text-2xl font-bold text-gray-800">Historical Data</h1>
      </div>
              onChange={(e) => handleFilterChange("centro", e.target.value)}
            >
              <option value="">Todos</option>
              {centrosDeTrabajo.map((centro) => (
                <option key={centro} value={centro}>{centro}</option>
              ))}
            </select>
          </div>

          {/* Sensor */}
          <div>
            <label htmlFor="sensor" className="block text-sm font-medium text-gray-700 mb-1">Sensor</label>
            <select 
              id="sensor" 
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filterParams.sensor}
              onChange={(e) => handleFilterChange("sensor", e.target.value)}
            >
              <option value="">Todos</option>
              {sensores.map((sensor) => (
                <option key={sensor} value={sensor}>{sensor}</option>
              ))}
            </select>
          </div>

          {/* Área */}
          <div>
            <label htmlFor="area" className="block text-sm font-medium text-gray-700 mb-1">Área</label>
            <select 
              id="area" 
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filterParams.area}
              onChange={(e) => handleFilterChange("area", e.target.value)}
            >
              <option value="">Todas</option>
              {areas.map((area) => (
                <option key={area} value={area}>{area}</option>
              ))}
            </select>
          </div>

          {/* Fecha */}
          <div>
            <label htmlFor="fecha" className="block text-sm font-medium text-gray-700 mb-1">Fecha</label>
            <select 
              id="fecha" 
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              value={filterParams.fecha}
              onChange={(e) => handleFilterChange("fecha", e.target.value)}
            >
              <option value="">Todas</option>
              {fechas.map((fecha) => (
                <option key={fecha} value={fecha}>{fecha}</option>
              ))}
            </select>
          </div>
        </div>
        <div className="mt-4 flex justify-end">
          <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
            Apply Filters
          </button>
        </div>
      </div>

      {/* Gráfico principal de líneas con D3 */}
      <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-lg font-semibold text-gray-800">Voltage and Current Trends</h2>
          <div className="flex space-x-2">
            <button className="px-4 py-2 bg-blue-100 text-blue-800 rounded-md text-sm font-medium">Day</button>
            <button className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md text-sm font-medium">Week</button>
            <button className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md text-sm font-medium">Month</button>
          </div>
        </div>
        <div className="h-80">
          <LineChart data={lineChartData} width={800} height={320} />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Gráfico de barras con D3 */}
        <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100">
          <h2 className="text-lg font-semibold mb-4 text-gray-800">Average Voltage by Area</h2>
          <div className="h-64">
            <BarChart data={barChartData} width={500} height={250} />
          </div>
        </div>

        {/* Gráfico de pastel con D3 */}
        <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100">
          <h2 className="text-lg font-semibold mb-4 text-gray-800">Current Distribution by Sensor</h2>
          <div className="h-64 flex justify-center">
            <PieChart data={pieChartData} width={250} height={250} />
          </div>
        </div>
      </div>
    </div>
  );
}
